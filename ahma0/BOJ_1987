import java.io.*;
import java.util.*;

public class Main {

    static int N, M, max = 0;
    static int map[][];
    static boolean visited[];
    static int move_X[] = {0, 0, -1, 1};
    static int move_Y[] = {-1, 1, 0, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        StringBuilder sb = new StringBuilder();

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        visited = new boolean[26];

        for(int i = 0; i < N; i++) {
            String s = br.readLine();

            for(int j = 0; j < M; j++) {
                map[i][j] = s.charAt(j) - 'A';
            }
        }

        dfs(0, 0, 0);

        sb.append(max);

        bw.write(sb.toString());
        bw.flush();
        bw.close();
        br.close();
    }

    static void dfs(int x, int y, int cnt) {
        if(visited[map[x][y]]) {
            max = Math.max(max, cnt);
            return;
        }

        visited[map[x][y]] = true;

        for(int i = 0; i < 4; i++) {
            int newX = x + move_X[i];
            int newY = y + move_Y[i];

            if(newX < 0 || newY < 0 || newX >= N || newY >= M)
                continue;

            dfs(newX, newY, cnt + 1);
        }

        visited[map[x][y]] = false;

    }

}

